# População 2022
file_path <- "C:/Users/Uriel Holanda/Documents/txt/UFPB Estatística/CENSO 2010/CENSO/input/base/Censo 2022_dados gerais_bairros JP.xlsx"
populacao_2022 <- xlsx::read.xlsx(file_path, sheetIndex  = 1, startRow = 5, encoding="UTF-8")
names(populacao_2022) <- c('bairros','pop_2022')
populacao_2022 <- subset(populacao_2022, !is.na(pop_2022))
populacao_2022$bairros <- stringr::str_trim(populacao_2022$bairros)
populacao_2022$bairros <- str_replace_all(str_to_upper(populacao_2022$bairros), "[- ]", "_")
# Shapefile
shapefile_path <- file.path("C:/Users/Uriel Holanda/Documents/txt/UFPB Estatística/CENSO 2010/CENSO/input/shapefile/25SEE250GC_SIR.shp")
bairros <- st_read(shapefile_path, options = "ENCODING=WINDOWS-1252")
# Filtrar para João Pessoa e simplificar geometria
bairros_joao_pessoa <- bairros %>%
filter(NM_MUNICIP == "JOÃO PESSOA")
bairros_simplificados <- bairros_joao_pessoa %>%
group_by(bairros = NM_BAIRRO) %>%
summarize(geometry = st_union(st_make_valid(geometry))) %>%
ungroup() %>%
mutate(bairros = str_replace_all(str_to_upper(bairros), "[- ]", "_"))
bairros_simplificados <- bairros_joao_pessoa %>%
group_by(bairros = NM_BAIRRO) %>%
summarize(geometry = st_union(st_make_valid(geometry))) %>%
ungroup() %>%
mutate(bairros = str_replace_all(str_to_upper(bairros), "[- ]", "_"))
bairros_simplificados$area <- as.numeric(st_area(bairros_simplificados$geometry)/1000)
df_pop <- full_join(populacao_2000,populacao_2010) %>%
full_join(populacao_2022) %>%
full_join(bairros_simplificados) %>%
mutate(densidade_2022  = pop_2022/area,
cresc_2022_2010 = ((pop_2022 - pop_2010)/pop_2010)*100,
cresc_2022_2000 = ((pop_2022 - pop_2000)/pop_2000)*100) %>%
st_as_sf()
# Filtrar e remover as geometrias vazias
df_pop <- df_pop[!st_is_empty(df_pop), ]
## Função para gerar os intervalos
#gerar breaks separando valores negativos, zeros e positivos
generate_intervals <- function(var, n_intervals = 10, decimal_places = 2, cores = NULL) {
#verificar se var é numérico
if (!is.numeric(var)) {
stop("var must be a numeric vector")
}
#calcular valores máximos e mínimos
min_val <- min(var, na.rm = T)
max_val <- max(var, na.rm = T)
#gerar os breaks separando em valores negativos, zeros e positivos
# Criar os labels
labels <- paste0(
gsub("\\.", ",", round(head(breaks, -1), decimal_places)),
" à ",
gsub("\\.", ",", round(tail(breaks, -1), decimal_places))
)
if(is.null(cores)){
cores <- NULL
} else {
cores <- cores
}
# Retornar uma lista com breaks e labels
list(breaks = breaks, labels = labels, cores = cores)
}
tmap_mode("view")
intervals <- generate_intervals(df_pop$cresc_2022_2010, n_intervals = 10, cores = c("red","pink",  "white", "lightblue","blue"))
tm_shape(df_pop) +
tm_polygons("cresc_2022_2010", title = "Crescimento Populacional (2010-2022)",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = intervals$cores,
midpoint = 0,
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "Crescimento Populacional por Bairro de João Pessoa entre 2010 e 2022")
intervals <- generate_intervals(df_pop$cresc_2022_2000, n_intervals = 9, cores = c("red","pink",  "white", "lightblue","blue"))
#cartograma de diferença populacional
tm_shape(df_pop) +
tm_polygons("cresc_2022_2000", title = "Crescimento Populacional (2000-2022)",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = intervals$cores, midpoint = 0,
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "Crescimento Populacional por Bairro de João Pessoa entre 2010 e 2022")
intervals <- generate_intervals(df_pop$densidade_2022, n_intervals = 12)
# Criar o cartograma usando a nova tabela de dados
tm_shape(df_pop) +
tm_polygons("densidade_2022", title = "Densidade Populacional por Bairro",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = "Blues",
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "Densidade Populacional por Bairro de João Pessoa - CENSO 2022")
# Configuração do tmap
intervals <- generate_intervals(df_pop$pop_2000, n_intervals = 10)
# Criar o cartograma
tm_shape(df_pop) +
tm_polygons("pop_2000", title = "População por Bairro",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = "Blues",
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "População por bairro de João Pessoa - CENSO 2000")
# Configuração do tmap
intervals <- generate_intervals(df_pop$pop_2010, n_intervals = 10)
# Criar o cartograma
tm_shape(df_pop) +
tm_polygons("pop_2010", title = "População por Bairro",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = "Blues",
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "População por bairro de João Pessoa - CENSO 2010")
#carregar cartograma!
intervals <- generate_intervals(df_pop$pop_2022, n_intervals = 10)
# Criar o cartograma usando a nova tabela de dados
tm_shape(df_pop) +
tm_polygons("pop_2022", title = "População por Bairro",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = "Blues",
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "População por bairro de João Pessoa - CENSO 2022")
names(table) <- c('Bairros','População 2000','População 2010','População 2022','Densidade 2022 (hab/km²)','Crescimento (2022-2010)','Crescimento (2010-2000)')
table %>%
kable(escape = FALSE, align = "c") %>%  # escape = FALSE permite HTML no título
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = TRUE,
position = "center") %>%
scroll_box(width = "100%", height = "800px")
# Gerar tabela com rolagem horizontal
library(kableExtra)
table %>%
kable(escape = FALSE, align = "c") %>%  # escape = FALSE permite HTML no título
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = TRUE,
position = "center") %>%
scroll_box(width = "100%", height = "800px")
names(table) <- c('Bairros','População 2000','População 2010','População 2022','Densidade 2022 (hab/km²)','Crescimento (2022-2010)','Crescimento (2010-2000)')
# Gerar tabela com rolagem horizontal
library(kableExtra)
names(table) <- c('Bairros','População 2000','População 2010','População 2022','Densidade 2022 (hab/km²)','Crescimento (2022-2010)','Crescimento (2010-2000)')
table %>%
kable(escape = FALSE, align = "c") %>%  # escape = FALSE permite HTML no título
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = TRUE,
position = "center") %>%
scroll_box(width = "100%", height = "800px")
x <- 5
y -> 32
A = pera
A = "pera"
print(A)
y -> 32
y <- 32
print(x)
print(y)
"y" -> 32
X <- 5+4
print(X)
Y <- y+x
print(Y)
X <- x+4
print(X)
B <- sqrt(16)
print(B)
Val = c(9, 37, 16)
conteúdo = c("Pedro", "Estatística", "ggplot2")
print(Val)
print(conteúdo)
class(x)
class(A)
a = 3/5
print(a)
a = 100/3
print(a)
a <- TRUE
b <- FALSE
resultado <- a & b  # AND lógico
print(resultado)  # FALSE
x>X
Y>x
ex1 <- list(nome = "Pedro", idade = 27, notas = 8, 9, 7)
print(list)
ex1 <- list(nome = "Pedro", idade = 27, notas = 8, 9, 7, aprovado = T)
nome <- minha_lista$nome
nome <- ex1$nome
print(nome)
matrix(1:6, nrow = 2, ncol = 3)
# Criar um data frame
df <- data.frame(
nome = c("Ana", "João", "Maria"),
idade = c(22, 25, 28),
nota = c(8.5, 7.0, 9.0)
)
print(df)
df$nota
dados\$sexo = c("H", "M", "H")
df$sexo = c("H", "M", "H")
print(df)
ifelse(salarios < 1000, “pouco”,”muito”)
salarios <- c(1000, 400, 1200, 3500, 380,
3000, 855, 700, 1500, 500)
ifelse(salarios < 1000, "pouco","muito")
bairros <- data.frame(
nome = c("Gramame", "Mangabeira", "Penha", "João Agripino"),
populacao = c(644884, 68808, 648, 1745))
limiar <- 30000
bairros$classificacao <- ifelse(bairros$classificacao > limiar, "População alta", "População Baixa")
bairros <- data.frame(nome = c("Gramame", "Mangabeira", "Penha", "João Agripino"),
populacao = c(644884, 68808, 648, 1745))
bairros$classificacao <- ifelse(bairros$classificacao > limiar, "População alta", "População Baixa")
bairros$classificacao <- ifelse(bairros$populacao > limiar, "População alta", "População Baixa")
print(bairros)
#banco de dados
file_path <- "C:/Users/Uriel Holanda/Documents/txt/UFPB Estatística/CENSO 2010/Censo 2022_dados população por bairros em JP.xlsx"
library(readxl)
library(dplyr)
library(ggplot2)
library(sf)
library(tmap)
library(stringr)
library(stringi)
library(geobr)
populacao <- read_excel(file_path, skip = 1)
colnames(populacao)
#renomear as colunas
populacao <- populacao %>%
rename(Bairros = `Bairros`, Populacao_2022 = `População Total`) %>%
select(Bairros, Populacao_2022)
str(populacao)
populacao <- populacao %>%
filter(!is.na(`Populacao_2022`) & !Bairros %in% c(NA, "Fonte: Censos Demográficos"))
#transformar em numeric
populacao$Populacao_2022 <- as.numeric(populacao$Populacao_2022)
str(populacao$Populacao_2022)
#padronizar bairros banco de dados
populacao <- populacao %>%
mutate(Bairros = str_replace_all(str_to_upper(Bairros), "[- ]", "_"))
str(populacao)
#padronizar bairros espaciais
str(bairros_joao_pessoa)
bairros_joao_pessoa <- bairros_joao_pessoa %>%
mutate(NM_BAIRRO = str_replace_all(str_to_upper(NM_BAIRRO), "[- ]", "_"))
#unir setores censitários
bairros_simplificados <- bairros_joao_pessoa %>%
group_by(NM_BAIRRO) %>%
summarize(geometry = st_union(st_make_valid(geometry))) %>%
ungroup()
str(bairros_simplificados)
#unir os dados
bairros_populacao_simplificados <- bairros_simplificados %>%
left_join(populacao, by = c("NM_BAIRRO" = "Bairros"))
head(bairros_populacao_simplificados)
tail(bairros)
tail(bairros_joao_pessoa)
tail(bairros_populacao_simplificados_2000)
# Carregar o pacote necessário
library(tibble)
# Criar o tibble com os dados fornecidos
bairros <- tibble(
NM_BAIRRO = c("TRINCHEIRAS", "VALENTINA", "VARADOURO", "VARJÃO", "ÁGUA_FRIA", "NA"),
# Geometry é ignorado para simplificação
Populacao_2000 = c(8765, 22306, 4121, 19112, 3069, NA)
)
# Inicializar o índice
i <- 1
# Loop while para iterar sobre cada bairro e imprimir nome e população
while (i <= nrow(bairros)) {
nome_bairro <- bairros$NM_BAIRRO[i]
populacao_bairro <- bairros$Populacao_2000[i]
cat("Bairro:", nome_bairro, "- População 2000:", populacao_bairro, "\n")
i <- i + 1
}
View(bairros_populacao_simplificados)
file_path_2000 <- "C:/Users/Uriel Holanda/Documents/txt/UFPB Estatística/CENSO 2010/Tabela 1522.xlsx"
populacao_2000 <- read_excel(file_path_2000, skip = 1)
names(populacao_2000)
#renomear e selecionar colunas de interesse
populacao_2000 <- populacao_2000 %>%
rename(Bairros = `Município e Bairro`, populacao_2000 = `Populacao`) %>%
select(Bairros, populacao_2000)
#transformar a coluna Populacao_2000 em numérica contínua
populacao_2000$populacao_2000 <- as.numeric(populacao_2000$populacao_2000)
populacao_2000 <- populacao_2000 %>%
filter(Bairros != "Fonte: IBGE - Censo Demográfico")
head(populacao_2000)
#padronizar nome dos bairros
populacao <- populacao %>%
mutate(Bairros = str_replace_all(str_to_upper(Bairros), "[- ]", "_"))
# Padronizar nomes dos bairros nos dados de 2000
# Remover a parte " - João Pessoa (PB)" dos nomes dos bairros na tabela de 2000
populacao_2000 <- populacao_2000 %>%
filter(Bairros != "Fonte: IBGE - Censo Demográfico") %>%  # Excluir a linha com a fonte
mutate(Bairros = str_replace_all(Bairros, " - João Pessoa \\(PB\\)", "")) %>%  # Remover a parte do nome
mutate(Bairros = str_replace_all(str_to_upper(Bairros), "[- ]", "_"))  # Padronizar
# Verificar os nomes dos bairros após o ajuste
unique(populacao_2000$Bairros)
# Verificar correspondência de nomes após ajustes
setdiff(unique(populacao$Bairros), unique(populacao_2000$Bairros))
setdiff(unique(populacao_2000$Bairros), unique(populacao$Bairros))
# Ajustar os nomes dos bairros na tabela de 2000
populacao_2000 <- populacao_2000 %>%
mutate(Bairros = ifelse(Bairros == "JOÃO_PESSOA_(PB)", "JOÃO_PESSOA", Bairros),
Bairros = ifelse(Bairros == "MUÇUMAGRO", "MUCUMAGO", Bairros))
#união dos dados 2000-2022
populacao_comparativa0022 <- populacao %>%
left_join(populacao_2000, by = "Bairros")
#calcular diferença e razão
populacao_comparativa0022 <- populacao_comparativa0022 %>%
mutate(diferenca_populacional = Populacao_2022 - populacao_2000,
razao_populacional = Populacao_2022 / populacao_2000)
#unir dados espaciais e especiais
bairros_comparativos0022 <- bairros_populacao_simplificados %>%
left_join(populacao_comparativa0022, by = c("NM_BAIRRO" = "Bairros"))
View(bairros_comparativos0022)
colnames(bairros_comparativos0022)
populacao_alvo <- 500000
tempos_para_alvo <- numeric(nrow(bairros_comparativos0022))
nome_bairro <- bairros_comparativos0022$NM_BAIRRO[i]
# Calcular a taxa de crescimento anual
anos <- 2022 - 2000
taxa_crescimento <- (populacao_atual / populacao_inicial)^(1/anos) - 1
# Inicializar o contador de anos
anos_necessarios <- 0
populacao_inicial <- bairros_comparativos0022$populacao_2000[i]
populacao_atual <- bairros_comparativos0022$Populacao_2022.x[i]
taxa_crescimento <- (populacao_atual / populacao_inicial)^(1/anos) - 1
# Inicializar o contador de anos
anos_necessarios <- 0
# Loop while para calcular o tempo necessário para atingir a população alvo
while (populacao_atual < populacao_alvo) {
populacao_atual <- populacao_atual * (1 + taxa_crescimento)
anos_necessarios <- anos_necessarios + 1
}
# Armazenar o resultado
tempos_para_alvo[i] <- anos_necessarios
# Loop para calcular o tempo necessário para cada bairro atingir a população alvo
for (i in 1:nrow(bairros_comparativos0022)) {
populacao_inicial <- bairros_comparativos0022$populacao_2000[i]
populacao_atual <- bairros_comparativos0022$Populacao_2022.x[i]
nome_bairro <- bairros_comparativos0022$NM_BAIRRO[i]
# Calcular a taxa de crescimento anual
anos <- 2022 - 2000
taxa_crescimento <- (populacao_atual / populacao_inicial)^(1/anos) - 1
# Inicializar o contador de anos
anos_necessarios <- 0
# Loop while para calcular o tempo necessário para atingir a população alvo
while (populacao_atual < populacao_alvo) {
populacao_atual <- populacao_atual * (1 + taxa_crescimento)
anos_necessarios <- anos_necessarios + 1
}
# Armazenar o resultado
tempos_para_alvo[i] <- anos_necessarios
cat("Bairro:", nome_bairro, "- Anos necessários para atingir 500000 habitantes:", anos_necessarios, "\n")
}
# Supondo o dataframe bairros_comparativos0022 já está carregado
# Definir a população alvo
populacao_alvo <- 500000
# Criar um vetor para armazenar os resultados
tempos_para_alvo <- numeric(nrow(bairros_comparativos0022))
# Loop para calcular o tempo necessário para cada bairro atingir a população alvo
for (i in 1:nrow(bairros_comparativos0022)) {
populacao_inicial <- bairros_comparativos0022$populacao_2000[i]
populacao_atual <- bairros_comparativos0022$Populacao_2022.x[i]
nome_bairro <- bairros_comparativos0022$NM_BAIRRO[i]
# Calcular a taxa de crescimento anual
anos <- 2022 - 2000
taxa_crescimento <- (populacao_atual / populacao_inicial)^(1/anos) - 1
# Inicializar o contador de anos
anos_necessarios <- 0
# Loop while para calcular o tempo necessário para atingir a população alvo
while (populacao_atual < populacao_alvo) {
populacao_atual <- populacao_atual * (1 + taxa_crescimento)
anos_necessarios <- anos_necessarios + 1
}
# Armazenar o resultado
tempos_para_alvo[i] <- anos_necessarios
cat("Bairro:", nome_bairro, "- Anos necessários para atingir 500000 habitantes:", anos_necessarios, "\n")
}
library(readxl)
library(dplyr)
library(ggplot2)
library(sf)
library(tmap)
library(stringr)
library(stringi)
library(geobr)
library(rJava)
# População 2000
file_path_2000 <- paste0("input/base/Tabela 1522.xlsx")
populacao_2000 <- xlsx::read.xlsx(file_path_2000, sheetIndex  = 1, startRow = 2, encoding="UTF-8")
names(populacao_2000) <- c('bairros','pop_2000')
populacao_2000 <- subset(populacao_2000, !is.na(pop_2000))
populacao_2000$bairros <- gsub(' - João Pessoa \\(PB)','',populacao_2000$bairros)
populacao_2000$bairros <- gsub(' \\(PB)','',populacao_2000$bairros)
populacao_2000$bairros <- ifelse(populacao_2000$bairros == 'Muçumagro',
'Mucumago',populacao_2000$bairros)
# População 2010
file_path <- "./input/base/Censo 2010_dados gerais_bairros JP.xlsx"
populacao_2010 <- xlsx::read.xlsx(file_path, sheetIndex  = 2, startRow = 6, encoding="UTF-8")
populacao_2010 <- populacao_2010[,1:2]
names(populacao_2010) <- c('bairros','pop_2010')
populacao_2010 <- subset(populacao_2010, !is.na(pop_2010))
populacao_2010$bairros <- gsub(' - João Pessoa \\(PB)','',populacao_2010$bairros)
populacao_2010$bairros <- gsub(' \\(PB)','',populacao_2010$bairros)
populacao_2010$bairros <- str_replace_all(str_to_upper(populacao_2010$bairros), "[- ]", "_")
populacao_2000$bairros <- str_replace_all(str_to_upper(populacao_2000$bairros), "[- ]", "_")
# População 2022
file_path <- "./input/base/Censo 2022_dados gerais_bairros JP.xlsx"
populacao_2022 <- xlsx::read.xlsx(file_path, sheetIndex  = 1, startRow = 5, encoding="UTF-8")
names(populacao_2022) <- c('bairros','pop_2022')
populacao_2022 <- subset(populacao_2022, !is.na(pop_2022))
populacao_2022$bairros <- stringr::str_trim(populacao_2022$bairros)
populacao_2022$bairros <- str_replace_all(str_to_upper(populacao_2022$bairros), "[- ]", "_")
# Shapefile
shapefile_path <- file.path("./input/shapefile/25SEE250GC_SIR.shp")
bairros <- st_read(shapefile_path, options = "ENCODING=WINDOWS-1252")
# Filtrar para João Pessoa e simplificar geometria
bairros_joao_pessoa <- bairros %>%
filter(NM_MUNICIP == "JOÃO PESSOA")
bairros_simplificados <- bairros_joao_pessoa %>%
group_by(bairros = NM_BAIRRO) %>%
summarize(geometry = st_union(st_make_valid(geometry))) %>%
ungroup() %>%
mutate(bairros = str_replace_all(str_to_upper(bairros), "[- ]", "_"))
bairros_simplificados$area <- as.numeric(st_area(bairros_simplificados$geometry)/1000)
df_pop <- full_join(populacao_2000,populacao_2010) %>%
full_join(populacao_2022) %>%
full_join(bairros_simplificados) %>%
mutate(densidade_2022  = pop_2022/area,
cresc_2022_2010 = ((pop_2022 - pop_2010)/pop_2010)*100,
cresc_2022_2000 = ((pop_2022 - pop_2000)/pop_2000)*100) %>%
st_as_sf()
# Filtrar e remover as geometrias vazias
df_pop <- df_pop[!st_is_empty(df_pop), ]
#gerar breaks separando valores negativos, zeros e positivos
generate_intervals <- function(var, n_intervals = 10, decimal_places = 2, cores = NULL) {
#calcular valores máximos e mínimos
min_val <- min(var, na.rm = T)
max_val <- max(var, na.rm = T)
#gerar os breaks separando em valores negativos, zeros e positivos
if(min_val < 0 ){
breaks <- unique(c(
seq(min_val, 0, length.out = ceiling(n_intervals / 2) + 1), # Intervalos negativos até zero
seq(0, max_val, length.out = floor(n_intervals / 2) + 1)    # Intervalos positivos a partir de zero
))
} else {
breaks <- unique(c(
breaks <- seq(min_val, max_val, length.out = n_intervals + 1)
))
}
# Criar os labels
labels <- paste0(
gsub("\\.", ",", round(head(breaks, -1), decimal_places)),
" à ",
gsub("\\.", ",", round(tail(breaks, -1), decimal_places))
)
if(is.null(cores)){
cores <- NULL
} else {
cores <- cores
}
# Retornar uma lista com breaks e labels
list(breaks = breaks, labels = labels, cores = cores)
intervals <- generate_intervals(df_pop$cresc_2022_2010, n_intervals = 10, cores = c("red","pink",  "white", "lightblue","blue"))
tm_shape(df_pop) +
tm_polygons("cresc_2022_2010", title = "Crescimento Populacional (2010-2022)",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = intervals$cores,
midpoint = 0,
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "Crescimento Populacional por Bairro de João Pessoa entre 2010 e 2022")
tm_shape(df_pop) +
tm_polygons("cresc_2022_2010", title = "Crescimento Populacional (2010-2022)",
style = "fixed",
breaks = intervals$breaks,
labels = intervals$labels,
palette = intervals$cores,
midpoint = 0,
legend.format = list(digits = 0),
textNA = "Faltantes") +
tm_borders() +
tm_layout(title = "Crescimento Populacional por Bairro de João Pessoa entre 2010 e 2022")
# Cartograma de diferença populacional
# Coluna categórica baseada na taxa de crescimento
df_pop1022 <- df_pop1022 %>%
mutate(cresc_2022_2010_cat = cut(cresc_2022_2010,
breaks = intervals$breaks,
labels = intervals$labels,
include.lowest = T))
View(df_pop)
View(df_pop)
View(df_pop)
View(df_pop)
View(df_pop)
View(df_pop)
